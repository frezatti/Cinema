services:
  frontend:
    container_name: cinema-frontend
    build:
      context: ./Cinema-tec
      dockerfile: Dockerfile
      args:
        - PORT=${FRONTEND_PORT}
    restart: unless-stopped
    environment:
      - PORT=${FRONTEND_PORT}
    ports:
      - "${FRONTEND_PORT}:${FRONTEND_PORT}" # Expose frontend port
    depends_on:
      - backend
    networks:
      - app-network

  backend:
    build:
      context: ./Cinema-nest
      dockerfile: Dockerfile
      args:
        - PORT=${BACKEND_PORT}
    container_name: cinema-backend
    restart: unless-stopped
    environment:
      - PORT=${BACKEND_PORT} # Use BACKEND_PORT from .env
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:${POSTGRES_PORT}/${POSTGRES_DB}
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}" # Expose backend port
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network

  postgres:
    image: postgres:16-alpine
    container_name: cinema_db_postgres
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432" # Map to container's default PostgreSQL port
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: cinema_pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: "admin@example.com"
      PGADMIN_DEFAULT_PASSWORD: "admin"
    ports:
      - "${PGADMIN_PORT}:80"
    depends_on:
      - postgres
    networks:
      - app-network

  nginx:
    image: nginx:alpine
    container_name: cinema-nginx
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - backend
      - frontend
    networks:
      - app-network

volumes:
  postgres-data:

networks:
  app-network:
    driver: bridge
